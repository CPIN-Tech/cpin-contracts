{
  "address": "0xBF3444a2f7c6a536360E4845db7091c14a8F75Cc",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sppId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "didAccountPubKey",
          "type": "uint256"
        }
      ],
      "name": "DidRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sppId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "didAccountPubKey",
          "type": "uint256"
        }
      ],
      "name": "DidUnregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sppId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "productionW",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "cdataAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "cwattAmount",
          "type": "uint128"
        }
      ],
      "name": "ProductionInfoAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sppId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "cdataAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "cwattAmount",
          "type": "uint128"
        }
      ],
      "name": "RewardCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sppId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "startTime",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "infoIpfsCid",
          "type": "string"
        }
      ],
      "name": "SppCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sppId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "ipfsCid",
          "type": "string"
        }
      ],
      "name": "SppIpfsCidUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sppId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "capacity",
          "type": "uint128"
        }
      ],
      "name": "TokenStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sppId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "capacity",
          "type": "uint128"
        }
      ],
      "name": "TokenWithdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CDATAToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CWATTToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DATA_UPDATER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPP_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sppId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "startTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "maxCapacity",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "infoIpfsCid",
          "type": "string"
        }
      ],
      "name": "addSpp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sppId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "previousUpdateTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint128",
          "name": "productionW",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "cdataAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "cwattAmount",
          "type": "uint128"
        }
      ],
      "name": "addSppProductionInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sppId",
          "type": "uint256"
        }
      ],
      "name": "calculateRewardsEarned",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "earnedCdata",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "earnedCwatt",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "collectReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sppId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getSppDidByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sppId",
          "type": "uint256"
        }
      ],
      "name": "getSppDidCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "contract ICpinVirtualPanel",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_CDATAToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_CWATTToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nft",
      "outputs": [
        {
          "internalType": "contract ICpinVirtualPanel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sppId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "didAccountPubKey",
          "type": "uint256"
        }
      ],
      "name": "registerDid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sppDatas",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "totalStakedCapacity",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "startTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "numberOfStakes",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "lastUpdateTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "maxCapacity",
          "type": "uint32"
        },
        {
          "internalType": "uint128",
          "name": "rewardIndexCDATA",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "rewardIndexCWATT",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sppIpfsCids",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenEarnedValues",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "valueCDATA",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "valueCWATT",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToSppId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenRewardIndexes",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "valueCDATA",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "valueCWATT",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sppId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "didAccountPubKey",
          "type": "uint256"
        }
      ],
      "name": "unregisterDid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sppId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ipfsCid",
          "type": "string"
        }
      ],
      "name": "updateSppIpfsCid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a871a8d78d570ee27c5d78ef596d0a30cc8738bab1533ee6aacacf3942a6809",
  "receipt": {
    "to": null,
    "from": "0xE52DD277c3C1C0E8f3786aAec16127a76c45Fe3a",
    "contractAddress": "0xBF3444a2f7c6a536360E4845db7091c14a8F75Cc",
    "transactionIndex": 0,
    "gasUsed": "2793326",
    "logsBloom": "0x
    "blockHash": "0x18d6827779f46395ad8816c0328651c76a65acc60265946887003336c7de981d",
    "transactionHash": "0x0a871a8d78d570ee27c5d78ef596d0a30cc8738bab1533ee6aacacf3942a6809",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4463290,
        "transactionHash": "0x0a871a8d78d570ee27c5d78ef596d0a30cc8738bab1533ee6aacacf3942a6809",
        "address": "0xBF3444a2f7c6a536360E4845db7091c14a8F75Cc",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x18d6827779f46395ad8816c0328651c76a65acc60265946887003336c7de981d"
      }
    ],
    "blockNumber": 4463290,
    "cumulativeGasUsed": "2793326",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "9a574a12c466a2893a4677042b19d757",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sppId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"didAccountPubKey\",\"type\":\"uint256\"}],\"name\":\"DidRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sppId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"didAccountPubKey\",\"type\":\"uint256\"}],\"name\":\"DidUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sppId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"productionW\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"cdataAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"cwattAmount\",\"type\":\"uint128\"}],\"name\":\"ProductionInfoAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sppId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"cdataAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"cwattAmount\",\"type\":\"uint128\"}],\"name\":\"RewardCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sppId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"infoIpfsCid\",\"type\":\"string\"}],\"name\":\"SppCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sppId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ipfsCid\",\"type\":\"string\"}],\"name\":\"SppIpfsCidUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sppId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"capacity\",\"type\":\"uint128\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sppId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"capacity\",\"type\":\"uint128\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CDATAToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CWATTToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DATA_UPDATER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPP_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sppId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxCapacity\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"infoIpfsCid\",\"type\":\"string\"}],\"name\":\"addSpp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sppId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"previousUpdateTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"productionW\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"cdataAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"cwattAmount\",\"type\":\"uint128\"}],\"name\":\"addSppProductionInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sppId\",\"type\":\"uint256\"}],\"name\":\"calculateRewardsEarned\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"earnedCdata\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"earnedCwatt\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"collectReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sppId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSppDidByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sppId\",\"type\":\"uint256\"}],\"name\":\"getSppDidCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"contract ICpinVirtualPanel\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_CDATAToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_CWATTToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract ICpinVirtualPanel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sppId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"didAccountPubKey\",\"type\":\"uint256\"}],\"name\":\"registerDid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sppDatas\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"totalStakedCapacity\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numberOfStakes\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdateTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxCapacity\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"rewardIndexCDATA\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardIndexCWATT\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sppIpfsCids\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenEarnedValues\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"valueCDATA\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"valueCWATT\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToSppId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenRewardIndexes\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"valueCDATA\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"valueCWATT\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sppId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"didAccountPubKey\",\"type\":\"uint256\"}],\"name\":\"unregisterDid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sppId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsCid\",\"type\":\"string\"}],\"name\":\"updateSppIpfsCid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"sppDatas\":{\"details\":\"sppId => SppData\"},\"sppDids\":{\"details\":\"sppId => peaq did set\"},\"sppIpfsCids\":{\"details\":\"sppId => ipfs cid\"},\"tokenEarnedValues\":{\"details\":\"tokenId => sppId => TokenEarnedValues\"},\"tokenIdToSppId\":{\"details\":\"tokenId => sppId\"},\"tokenRewardIndexes\":{\"details\":\"tokenId => sppId => RewardIndexes\"},\"userStakedTokens\":{\"details\":\"account => staked tokens set\"}},\"title\":\"Stake Cpin Virtual Panels to SPP's and get CDATA and CWATT tokens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CpinSppStaking.sol\":\"CpinSppStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ContextUpgradeable} from \\\"./ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\\n * careful about sending transactions invoking {multicall}. For example, a relay address that filters function\\n * selectors won't filter calls nested within a {multicall} operation.\\n *\\n * NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\\n * If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\\n * to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\\n * {_msgSender} are not propagated to subcalls.\\n */\\nabstract contract MulticallUpgradeable is Initializable, ContextUpgradeable {\\n    function __Multicall_init() internal onlyInitializing {\\n    }\\n\\n    function __Multicall_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        bytes memory context = msg.sender == _msgSender()\\n            ? new bytes(0)\\n            : msg.data[msg.data.length - _contextSuffixLength():];\\n\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x1545b1796f0b94f811d95b8b208c0668dacfc7768247d22b63161a47c4c5ef4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/CpinSppStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.20;\\npragma abicoder v2;\\n\\nimport \\\"./interfaces/ICpinSppStaking.sol\\\";\\nimport \\\"./interfaces/ICpinVirtualPanel.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title Stake Cpin Virtual Panels to SPP's and get CDATA and CWATT tokens\\ncontract CpinSppStaking is\\n    Initializable,\\n    ICpinSppStaking,\\n    AccessControlUpgradeable,\\n    MulticallUpgradeable\\n{\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    bytes32 public constant SPP_MANAGER_ROLE = keccak256(\\\"SPP_MANAGER_ROLE\\\");\\n    bytes32 public constant DATA_UPDATER_ROLE = keccak256(\\\"DATA_UPDATER_ROLE\\\");\\n\\n    struct SppData {\\n        uint128 totalStakedCapacity;\\n        uint32 startTime;\\n        uint32 numberOfStakes;\\n        uint32 lastUpdateTime;\\n        uint32 maxCapacity;\\n        // ----------\\n        uint128 rewardIndexCDATA;\\n        uint128 rewardIndexCWATT;\\n    }\\n\\n    struct TokenRewardInfo {\\n        uint128 valueCDATA;\\n        uint128 valueCWATT;\\n    }\\n\\n    ICpinVirtualPanel public override nft;\\n    IERC20 public override CDATAToken;\\n    IERC20 public override CWATTToken;\\n\\n    /// @dev sppId => SppData\\n    mapping(uint256 => SppData) public override sppDatas;\\n\\n    /// @dev sppId => ipfs cid\\n    mapping(uint256 => string) public override sppIpfsCids;\\n\\n    /// @dev sppId => peaq did set\\n    mapping(uint256 => EnumerableSet.UintSet) private sppDids;\\n\\n    /// @dev tokenId => sppId\\n    mapping(uint256 => uint256) public override tokenIdToSppId;\\n\\n    /// @dev tokenId => sppId => RewardIndexes\\n    mapping(uint256 => mapping(uint256 => TokenRewardInfo)) public override tokenRewardIndexes;\\n\\n    /// @dev tokenId => sppId => TokenEarnedValues\\n    mapping(uint256 => mapping(uint256 => TokenRewardInfo)) public override tokenEarnedValues;\\n\\n    /// @dev account => staked tokens set\\n    mapping(address => EnumerableSet.UintSet) private userStakedTokens;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address defaultAdmin,\\n        ICpinVirtualPanel _nft,\\n        IERC20 _CDATAToken,\\n        IERC20 _CWATTToken\\n    ) public initializer {\\n        __AccessControl_init();\\n        __Multicall_init();\\n\\n        nft = _nft;\\n        CDATAToken = _CDATAToken;\\n        CWATTToken = _CWATTToken;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, defaultAdmin);\\n        _grantRole(SPP_MANAGER_ROLE, defaultAdmin);\\n        _grantRole(DATA_UPDATER_ROLE, defaultAdmin);\\n    }\\n\\n    function addSpp(\\n        uint256 sppId,\\n        uint32 startTime,\\n        uint32 maxCapacity,\\n        string memory infoIpfsCid\\n    ) external override onlyRole(SPP_MANAGER_ROLE) {\\n        require(sppId > 0, \\\"id must be positive\\\");\\n        require(sppDatas[sppId].startTime == 0, \\\"SPP already exists\\\");\\n        require(block.timestamp <= startTime, \\\"startTime must be after now\\\");\\n        require(bytes(infoIpfsCid).length > 0, \\\"empty ipfs cid\\\");\\n\\n        sppDatas[sppId] = SppData({\\n            totalStakedCapacity: 0,\\n            startTime: startTime,\\n            numberOfStakes: 0,\\n            lastUpdateTime: startTime,\\n            maxCapacity: maxCapacity,\\n            rewardIndexCDATA: 0,\\n            rewardIndexCWATT: 0\\n        });\\n        sppIpfsCids[sppId] = infoIpfsCid;\\n\\n        emit SppCreated(sppId, startTime, infoIpfsCid);\\n    }\\n\\n    function registerDid(\\n        uint256 sppId,\\n        uint256 didAccountPubKey\\n    ) external override onlyRole(SPP_MANAGER_ROLE) {\\n        require(sppDatas[sppId].startTime > 0, \\\"SPP not found\\\");\\n        require(didAccountPubKey != 0, \\\"invalid address\\\");\\n        require(sppDids[sppId].contains(didAccountPubKey) == false, \\\"already registered\\\");\\n        sppDids[sppId].add(didAccountPubKey);\\n        emit DidRegistered(sppId, didAccountPubKey);\\n    }\\n\\n    function unregisterDid(\\n        uint256 sppId,\\n        uint256 didAccountPubKey\\n    ) external override onlyRole(SPP_MANAGER_ROLE) {\\n        require(sppDatas[sppId].startTime > 0, \\\"SPP not found\\\");\\n        require(sppDids[sppId].contains(didAccountPubKey), \\\"did not found\\\");\\n        sppDids[sppId].remove(didAccountPubKey);\\n        emit DidUnregistered(sppId, didAccountPubKey);\\n    }\\n\\n    function getSppDidCount(uint256 sppId) external view override returns (uint256) {\\n        return sppDids[sppId].length();\\n    }\\n    function getSppDidByIndex(\\n        uint256 sppId,\\n        uint256 index\\n    ) external view override returns (uint256) {\\n        return sppDids[sppId].at(index);\\n    }\\n\\n    function updateSppIpfsCid(\\n        uint256 sppId,\\n        string memory ipfsCid\\n    ) public override onlyRole(SPP_MANAGER_ROLE) {\\n        sppIpfsCids[sppId] = ipfsCid;\\n        emit SppIpfsCidUpdated(sppId, ipfsCid);\\n    }\\n\\n    function addSppProductionInfo(\\n        uint256 sppId,\\n        uint32 previousUpdateTime,\\n        uint32 timestamp,\\n        uint128 productionW,\\n        uint128 cdataAmount,\\n        uint128 cwattAmount\\n    ) public onlyRole(DATA_UPDATER_ROLE) {\\n        require(timestamp < block.timestamp, \\\"time must be before now\\\");\\n        SppData memory data = sppDatas[sppId];\\n        require(data.startTime > 0, \\\"non-existent SPP\\\");\\n        require(data.lastUpdateTime == previousUpdateTime, \\\"invalid previousUpdateTime\\\");\\n\\n        if (cdataAmount > 0 && data.totalStakedCapacity > 0) {\\n            data.rewardIndexCDATA += cdataAmount / data.totalStakedCapacity;\\n            SafeERC20.safeTransferFrom(CDATAToken, msg.sender, address(this), cdataAmount);\\n        }\\n        if (cwattAmount > 0 && data.totalStakedCapacity > 0) {\\n            data.rewardIndexCWATT += cwattAmount / data.totalStakedCapacity;\\n            SafeERC20.safeTransferFrom(CWATTToken, msg.sender, address(this), cwattAmount);\\n        }\\n        data.lastUpdateTime = timestamp;\\n        sppDatas[sppId] = data;\\n\\n        emit ProductionInfoAdded(sppId, timestamp, productionW, cdataAmount, cwattAmount);\\n    }\\n\\n    /// @inheritdoc IERC721Receiver\\n    function onERC721Received(\\n        address,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        require(msg.sender == address(nft), \\\"not a cpin virtual panel nft\\\");\\n        require(data.length > 0, \\\"no data provided\\\");\\n\\n        _stakeToken(tokenId, abi.decode(data, (uint256)), from);\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function withdrawToken(uint256 tokenId, address owner, bytes memory data) external override {\\n        (uint128 capacity, uint32 expireDate) = nft.panelInfos(tokenId);\\n        require(capacity > 0, \\\"non-existent token\\\");\\n        require(userStakedTokens[owner].contains(tokenId), \\\"invalid owner\\\");\\n        if (expireDate > block.timestamp) {\\n            // if not expired only owner can withdraw, otherwise everyone can withdraw token to the owner\\n            require(owner == msg.sender, \\\"only owner can collect\\\");\\n        }\\n\\n        uint256 sppId = tokenIdToSppId[tokenId];\\n\\n        _collectReward(tokenId, sppId, owner);\\n\\n        SppData memory sppData = sppDatas[sppId];\\n        sppData.totalStakedCapacity -= capacity;\\n        sppData.numberOfStakes--;\\n        sppDatas[sppId] = sppData;\\n\\n        userStakedTokens[owner].remove(tokenId);\\n        tokenIdToSppId[tokenId] = 0;\\n\\n        IERC721(address(nft)).safeTransferFrom(address(this), owner, tokenId, data);\\n\\n        emit TokenWithdrawn(tokenId, sppId, capacity);\\n    }\\n\\n    function collectReward(uint256 tokenId) external override {\\n        require(userStakedTokens[msg.sender].contains(tokenId), \\\"only owner can collect\\\");\\n        uint256 sppId = tokenIdToSppId[tokenId];\\n        _collectReward(tokenId, sppId, msg.sender);\\n    }\\n\\n    function _collectReward(uint256 tokenId, uint256 sppId, address owner) private {\\n        _updateRewards(tokenId, sppId);\\n\\n        TokenRewardInfo memory tokenEarnedInfo = tokenEarnedValues[tokenId][sppId];\\n        if (tokenEarnedInfo.valueCDATA > 0) {\\n            SafeERC20.safeTransfer(CDATAToken, owner, tokenEarnedInfo.valueCDATA);\\n        }\\n        if (tokenEarnedInfo.valueCWATT > 0) {\\n            SafeERC20.safeTransfer(CWATTToken, owner, tokenEarnedInfo.valueCWATT);\\n        }\\n        tokenEarnedValues[tokenId][sppId] = TokenRewardInfo(0, 0);\\n\\n        emit RewardCollected(\\n            tokenId,\\n            sppId,\\n            owner,\\n            tokenEarnedInfo.valueCDATA,\\n            tokenEarnedInfo.valueCWATT\\n        );\\n    }\\n\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        return userStakedTokens[owner].length();\\n    }\\n\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) external view override returns (uint256) {\\n        return userStakedTokens[owner].at(index);\\n    }\\n\\n    function _calculateRewards(\\n        uint256 tokenId,\\n        uint256 sppId\\n    ) private view returns (uint128 cdataAmount, uint128 cwattAmount) {\\n        (uint128 capacity, ) = nft.panelInfos(tokenId);\\n        SppData memory data = sppDatas[sppId];\\n        TokenRewardInfo memory tokenRewardInfo = tokenRewardIndexes[tokenId][sppId];\\n        cdataAmount = capacity * (data.rewardIndexCDATA - tokenRewardInfo.valueCDATA);\\n        cwattAmount = capacity * (data.rewardIndexCWATT - tokenRewardInfo.valueCWATT);\\n    }\\n\\n    function calculateRewardsEarned(\\n        uint256 tokenId,\\n        uint256 sppId\\n    ) external view returns (uint128 earnedCdata, uint128 earnedCwatt) {\\n        (uint128 cdataAmount, uint128 cwattAmount) = _calculateRewards(tokenId, sppId);\\n        TokenRewardInfo memory tokenEarnedInfo = tokenEarnedValues[tokenId][sppId];\\n        earnedCdata = tokenEarnedInfo.valueCDATA + cdataAmount;\\n        earnedCwatt = tokenEarnedInfo.valueCWATT + cwattAmount;\\n    }\\n\\n    function _updateRewards(uint256 tokenId, uint256 sppId) private {\\n        (uint128 cdataAmount, uint128 cwattAmount) = _calculateRewards(tokenId, sppId);\\n        TokenRewardInfo memory tokenEarnedInfo = tokenEarnedValues[tokenId][sppId];\\n        tokenEarnedInfo.valueCDATA += cdataAmount;\\n        tokenEarnedInfo.valueCWATT += cwattAmount;\\n        tokenEarnedValues[tokenId][sppId] = tokenEarnedInfo;\\n        tokenRewardIndexes[tokenId][sppId] = TokenRewardInfo(\\n            sppDatas[sppId].rewardIndexCDATA,\\n            sppDatas[sppId].rewardIndexCWATT\\n        );\\n    }\\n\\n    function _stakeToken(uint256 tokenId, uint256 sppId, address owner) private {\\n        (uint128 capacity, uint32 expireDate) = nft.panelInfos(tokenId);\\n        require(capacity > 0, \\\"non-existent token\\\");\\n        require(expireDate > block.timestamp, \\\"token expired\\\");\\n        SppData memory data = sppDatas[sppId];\\n        require(data.startTime > 0, \\\"non-existent SPP\\\");\\n        require(data.startTime < block.timestamp, \\\"SPP not started\\\");\\n        require(data.maxCapacity >= (data.totalStakedCapacity + capacity), \\\"not enough capacity\\\");\\n        data.totalStakedCapacity += capacity;\\n        data.numberOfStakes++;\\n        sppDatas[sppId] = data;\\n\\n        tokenIdToSppId[tokenId] = sppId;\\n\\n        tokenRewardIndexes[tokenId][sppId] = TokenRewardInfo(\\n            data.rewardIndexCDATA,\\n            data.rewardIndexCWATT\\n        );\\n\\n        userStakedTokens[owner].add(tokenId);\\n\\n        emit TokenStaked(tokenId, sppId, capacity);\\n    }\\n}\\n\",\"keccak256\":\"0x30f4f6f7ca21208c6d485f33d8ca8d9b36f8f695cf6ceb3e0335fc8b2dd46f59\",\"license\":\"MIT\"},\"contracts/interfaces/ICpinSppStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./ICpinVirtualPanel.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICpinSppStaking is IERC721Receiver {\\n    event SppCreated(uint256 sppId, uint32 startTime, string infoIpfsCid);\\n    event DidRegistered(uint256 sppId, uint256 didAccountPubKey);\\n    event DidUnregistered(uint256 sppId, uint256 didAccountPubKey);\\n    event SppIpfsCidUpdated(uint256 sppId, string ipfsCid);\\n    event ProductionInfoAdded(\\n        uint256 sppId,\\n        uint32 timestamp,\\n        uint128 productionW,\\n        uint128 cdataAmount,\\n        uint128 cwattAmount\\n    );\\n    event TokenWithdrawn(uint256 tokenId, uint256 sppId, uint128 capacity);\\n    event RewardCollected(\\n        uint256 tokenId,\\n        uint256 sppId,\\n        address owner,\\n        uint128 cdataAmount,\\n        uint128 cwattAmount\\n    );\\n    event TokenStaked(uint256 tokenId, uint256 sppId, uint128 capacity);\\n\\n    function nft() external view returns (ICpinVirtualPanel);\\n    function CDATAToken() external view returns (IERC20);\\n    function CWATTToken() external view returns (IERC20);\\n\\n    function sppDatas(\\n        uint256 sppId\\n    )\\n        external\\n        view\\n        returns (\\n            uint128 totalStakedCapacity,\\n            uint32 startTime,\\n            uint32 numberOfStakes,\\n            uint32 lastUpdateTime,\\n            uint32 maxCapacity,\\n            uint128 rewardIndexCDATA,\\n            uint128 rewardIndexCWATT\\n        );\\n\\n    function sppIpfsCids(uint256 sppId) external view returns (string memory);\\n\\n    function tokenIdToSppId(uint256 tokenId) external view returns (uint256 sppId);\\n\\n    function tokenRewardIndexes(\\n        uint256 tokenId,\\n        uint256 sppId\\n    ) external view returns (uint128 valueCDATA, uint128 valueCWATT);\\n\\n    function tokenEarnedValues(\\n        uint256 tokenId,\\n        uint256 sppId\\n    ) external view returns (uint128 valueCDATA, uint128 valueCWATT);\\n\\n    function addSpp(\\n        uint256 sppId,\\n        uint32 startTime,\\n        uint32 maxCapacity,\\n        string memory infoIpfsCid\\n    ) external;\\n\\n    function registerDid(uint256 sppId, uint256 didAccountPubKey) external;\\n    function unregisterDid(uint256 sppId, uint256 didAccountPubKey) external;\\n    function getSppDidCount(uint256 sppId) external view returns (uint256);\\n    function getSppDidByIndex(uint256 sppId, uint256 index) external view returns (uint256);\\n\\n    function updateSppIpfsCid(uint256 sppId, string memory ipfsCid) external;\\n\\n    function addSppProductionInfo(\\n        uint256 sppId,\\n        uint32 previousUpdateTime,\\n        uint32 timestamp,\\n        uint128 productionW,\\n        uint128 cdataAmount,\\n        uint128 cwattAmount\\n    ) external;\\n\\n    function withdrawToken(uint256 tokenId, address owner, bytes memory data) external;\\n\\n    function collectReward(uint256 tokenId) external;\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    function calculateRewardsEarned(\\n        uint256 tokenId,\\n        uint256 sppId\\n    ) external view returns (uint128 earnedCdata, uint128 earnedCwatt);\\n}\\n\",\"keccak256\":\"0x6d2daaacec72a36230b54a8e895051719db8ac9c624463d497cb490c8854f828\",\"license\":\"MIT\"},\"contracts/interfaces/ICpinVirtualPanel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface ICpinVirtualPanel {\\n    event PanelInfoUpdated(uint256 indexed tokenId, uint128 capacity, uint32 expireDate);\\n    event TokenSplited(\\n        address indexed account,\\n        uint256 indexed tokenId,\\n        uint128[] capacities,\\n        uint256[] newTokenIds\\n    );\\n    event TokensMerged(address indexed account, uint256[] tokenIds, uint256 newTokenId);\\n\\n    struct PanelInfo {\\n        uint128 capacity;\\n        uint32 expireDate;\\n    }\\n\\n    function updateBaseURI(string memory uri) external;\\n\\n    function panelInfos(\\n        uint256 tokenId\\n    ) external view returns (uint128 capacity, uint32 expireDate);\\n\\n    function safeMint(address to, uint128 capacity, uint32 expireDate) external;\\n\\n    function splitToken(uint256 tokenId, uint128[] memory capacities) external;\\n\\n    function mergeTokens(uint256[] memory tokenIds) external;\\n}\\n\",\"keccak256\":\"0xec75b6d39231d9a12d6d759fc44392075392d6b7ee6d189236e1519bcf725cf0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000d6565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff1615620000735760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000d35780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b61311180620000e66000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c8063a278d5261161010f578063d6842339116100a2578063f2f8511a11610071578063f2f8511a146104f5578063f3ff9bb314610508578063f8c8765e146105bd578063fcd222a3146105d057600080fd5b8063d68423391461047d578063e221505314610490578063e3043ee8146104a3578063f0ac97a5146104b657600080fd5b8063ad6706bb116100de578063ad6706bb14610424578063ba76775414610437578063bd3507da14610457578063d547741f1461046a57600080fd5b8063a278d526146103c9578063a925a09a146103dc578063abfade85146103f1578063ac9650d81461040457600080fd5b80633c423f0b116101875780638928e74d116101565780638928e74d1461033c57806391d148541461034f5780639bde779514610362578063a217fddf146103c157600080fd5b80633c423f0b146102d85780633de71ff0146102eb57806347ccca02146102fe57806370a082311461032957600080fd5b80632f2ff15d116101c35780632f2ff15d1461028a5780632f745c591461029f5780633512ad3e146102b257806336568abe146102c557600080fd5b806301ffc9a7146101f55780630ae7b9911461021d578063150b7a021461024b578063248a9ca314610277575b600080fd5b610208610203366004612731565b6105f7565b60405190151581526020015b60405180910390f35b61023d61022b36600461275b565b60066020526000908152604090205481565b604051908152602001610214565b61025e610259366004612789565b61062e565b6040516001600160e01b03199091168152602001610214565b61023d61028536600461275b565b6106f6565b61029d610298366004612828565b610718565b005b61023d6102ad366004612858565b61073a565b61023d6102c0366004612884565b610763565b61029d6102d3366004612828565b61077b565b61029d6102e6366004612932565b6107b3565b61023d6102f936600461275b565b610ba6565b600054610311906001600160a01b031681565b6040516001600160a01b039091168152602001610214565b61023d61033736600461299f565b610bbd565b61029d61034a366004612884565b610bde565b61020861035d366004612828565b610cfa565b6103a1610370366004612884565b60076020908152600092835260408084209091529082529020546001600160801b0380821691600160801b90041682565b604080516001600160801b03938416815292909116602083015201610214565b61023d600081565b61029d6103d73660046129dc565b610d32565b61023d60008051602061309c83398151915281565b61029d6103ff366004612a35565b610d94565b610417610412366004612aa1565b611023565b6040516102149190612b66565b61029d610432366004612884565b61110b565b61044a61044536600461275b565b611266565b6040516102149190612bca565b61029d61046536600461275b565b611300565b61029d610478366004612828565b61137c565b600254610311906001600160a01b031681565b61029d61049e366004612bf2565b611398565b6103a16104b1366004612884565b611757565b6103a16104c4366004612884565b60086020908152600092835260408084209091529082529020546001600160801b0380821691600160801b90041682565b600154610311906001600160a01b031681565b61057261051636600461275b565b600360205260009081526040902080546001909101546001600160801b038083169263ffffffff600160801b808304821694600160a01b8404831694600160c01b8504841694600160e01b900490931692818116929091041687565b604080516001600160801b03988916815263ffffffff97881660208201529587169086015292851660608501529316608083015291831660a0820152911660c082015260e001610214565b61029d6105cb366004612c6b565b6117d8565b61023d7f58a091b35f80bf54631090022328af78163c65b6b8fe6a4f19b69534d179fed081565b60006001600160e01b03198216637965db0b60e01b148061062857506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080546001600160a01b0316331461068e5760405162461bcd60e51b815260206004820152601c60248201527f6e6f742061206370696e207669727475616c2070616e656c206e66740000000060448201526064015b60405180910390fd5b816106ce5760405162461bcd60e51b815260206004820152601060248201526f1b9bc819185d18481c1c9bdd9a59195960821b6044820152606401610685565b6106e4846106de8486018661275b565b8761197a565b50630a85bd0160e11b95945050505050565b60009081526000805160206130bc833981519152602052604090206001015490565b610721826106f6565b61072a81611d9a565b6107348383611da7565b50505050565b6001600160a01b038216600090815260096020526040812061075c9083611e53565b9392505050565b600082815260056020526040812061075c9083611e53565b6001600160a01b03811633146107a45760405163334bd91960e11b815260040160405180910390fd5b6107ae8282611e5f565b505050565b600080546040516334dd5e1560e21b81526004810186905282916001600160a01b03169063d3757854906024016040805180830381865afa1580156107fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108209190612cc7565b915091506000826001600160801b0316116108725760405162461bcd60e51b81526020600482015260126024820152713737b716b2bc34b9ba32b73a103a37b5b2b760711b6044820152606401610685565b6001600160a01b03841660009081526009602052604090206108949086611edb565b6108d05760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b21037bbb732b960991b6044820152606401610685565b428163ffffffff16111561092f576001600160a01b038416331461092f5760405162461bcd60e51b81526020600482015260166024820152751bdb9b1e481bdddb995c8818d85b8818dbdb1b1958dd60521b6044820152606401610685565b600085815260066020526040902054610949868287611ef3565b600081815260036020908152604091829020825160e08101845281546001600160801b0380821680845263ffffffff600160801b808504821697860197909752600160a01b8404811697850197909752600160c01b830487166060850152600160e01b909204909516608083015260019092015480851660a08301529290920490921660c082015290849082906109e1908390612d0c565b6001600160801b0316905250604081018051906109fd82612d2c565b63ffffffff90811690915260008481526003602090815260408083208651815484890151848a015160608b015160808c01518a16600160e01b026001600160e01b03918b16600160c01b0263ffffffff60c01b19938c16600160a01b029390931667ffffffffffffffff60a01b19948c16600160801b9081026001600160a01b03199097166001600160801b0398891617969096179490941693909317919091171617835560a089015160c08a015183169091029116176001909101556001600160a01b038b16835260099091529020610adb925090899061204616565b5060008781526006602052604080822082905590549051635c46a7ef60e11b81526001600160a01b039091169063b88d4fde90610b229030908a908c908b90600401612d4c565b600060405180830381600087803b158015610b3c57600080fd5b505af1158015610b50573d6000803e3d6000fd5b5050604080518a8152602081018690526001600160801b0388168183015290517fc0f5cea5f46ac30c06facea0350694cb514a93ee92a2da625b2a696fe1624faa9350908190036060019150a150505050505050565b600081815260056020526040812061062890612052565b6001600160a01b038116600090815260096020526040812061062890612052565b60008051602061309c833981519152610bf681611d9a565b600083815260036020526040902054600160801b900463ffffffff16610c4e5760405162461bcd60e51b815260206004820152600d60248201526c14d414081b9bdd08199bdd5b99609a1b6044820152606401610685565b6000838152600560205260409020610c669083611edb565b610ca25760405162461bcd60e51b815260206004820152600d60248201526c191a59081b9bdd08199bdd5b99609a1b6044820152606401610685565b6000838152600560205260409020610cba9083612046565b5060408051848152602081018490527fae7443998f1af030e485fe6fc051f45e94f9f1e5640193cdd3eeaec9336bf7aa91015b60405180910390a1505050565b60009182526000805160206130bc833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60008051602061309c833981519152610d4a81611d9a565b6000838152600460205260409020610d628382612e09565b507fedb141dfbe8eea85d498187fc869ad6b9dae6d7dce98472834d6a054518f54068383604051610ced929190612ec9565b60008051602061309c833981519152610dac81611d9a565b60008511610df25760405162461bcd60e51b81526020600482015260136024820152726964206d75737420626520706f73697469766560681b6044820152606401610685565b600085815260036020526040902054600160801b900463ffffffff1615610e505760405162461bcd60e51b815260206004820152601260248201527153505020616c72656164792065786973747360701b6044820152606401610685565b8363ffffffff16421115610ea65760405162461bcd60e51b815260206004820152601b60248201527f737461727454696d65206d757374206265206166746572206e6f7700000000006044820152606401610685565b6000825111610ee85760405162461bcd60e51b815260206004820152600e60248201526d195b5c1d1e481a5c199cc818da5960921b6044820152606401610685565b6040805160e081018252600080825263ffffffff8088166020808501828152858701858152606087019384528a85166080880190815260a0880187815260c089018881528f8952600386528a892099518a5495519451975193518916600160e01b026001600160e01b03948a16600160c01b0263ffffffff60c01b19998b16600160a01b029990991667ffffffffffffffff60a01b1996909a16600160801b9081026001600160a01b03199098166001600160801b039384161797909717959095169890981796909617919091169190911787555192518416029190921617600190930192909255600490915220610fe08382612e09565b507f2901445817bb97938d949a68bd568f023e61da08d1a669c9c042a8a96cb825b585858460405161101493929190612eea565b60405180910390a15050505050565b6040805160008152602081019091526060908267ffffffffffffffff81111561104e5761104e6128a6565b60405190808252806020026020018201604052801561108157816020015b606081526020019060019003908161106c5790505b50915060005b83811015611103576110de308686848181106110a5576110a5612f22565b90506020028101906110b79190612f38565b856040516020016110ca93929190612f86565b60405160208183030381529060405261205c565b8382815181106110f0576110f0612f22565b6020908102919091010152600101611087565b505092915050565b60008051602061309c83398151915261112381611d9a565b600083815260036020526040902054600160801b900463ffffffff1661117b5760405162461bcd60e51b815260206004820152600d60248201526c14d414081b9bdd08199bdd5b99609a1b6044820152606401610685565b816000036111bd5760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b6044820152606401610685565b60008381526005602052604090206111d59083611edb565b156112175760405162461bcd60e51b8152602060048201526012602482015271185b1c9958591e481c9959da5cdd195c995960721b6044820152606401610685565b600083815260056020526040902061122f90836120d2565b5060408051848152602081018490527fae5ecbf0c241d947ba95d558775f54835565b930391185474a2bd3a5debcae6e9101610ced565b6004602052600090815260409020805461127f90612d7f565b80601f01602080910402602001604051908101604052809291908181526020018280546112ab90612d7f565b80156112f85780601f106112cd576101008083540402835291602001916112f8565b820191906000526020600020905b8154815290600101906020018083116112db57829003601f168201915b505050505081565b3360009081526009602052604090206113199082611edb565b61135e5760405162461bcd60e51b81526020600482015260166024820152751bdb9b1e481bdddb995c8818d85b8818dbdb1b1958dd60521b6044820152606401610685565b600081815260066020526040902054611378828233611ef3565b5050565b611385826106f6565b61138e81611d9a565b6107348383611e5f565b7f58a091b35f80bf54631090022328af78163c65b6b8fe6a4f19b69534d179fed06113c281611d9a565b428563ffffffff16106114175760405162461bcd60e51b815260206004820152601760248201527f74696d65206d757374206265206265666f7265206e6f770000000000000000006044820152606401610685565b600087815260036020908152604091829020825160e08101845281546001600160801b03808216835263ffffffff600160801b8084048216968501879052600160a01b8404821697850197909752600160c01b830481166060850152600160e01b909204909116608083015260019092015480831660a0830152939093041660c08301526114da5760405162461bcd60e51b815260206004820152601060248201526f06e6f6e2d6578697374656e74205350560841b6044820152606401610685565b8663ffffffff16816060015163ffffffff16146115395760405162461bcd60e51b815260206004820152601a60248201527f696e76616c69642070726576696f757355706461746554696d650000000000006044820152606401610685565b6000846001600160801b031611801561155b575080516001600160801b031615155b156115a857805161156c9085612fad565b8160a00181815161157d9190612fe1565b6001600160801b039081169091526001546115a892506001600160a01b0316903390309088166120de565b6000836001600160801b03161180156115ca575080516001600160801b031615155b156116175780516115db9084612fad565b8160c0018181516115ec9190612fe1565b6001600160801b0390811690915260025461161792506001600160a01b0316903390309087166120de565b63ffffffff8087166060830190815260008a815260036020908152604091829020855181549287015184880151955160808901518816600160e01b026001600160e01b03918916600160c01b0263ffffffff60c01b19988a16600160a01b029890981667ffffffffffffffff60a01b1993909916600160801b9081026001600160a01b03199097166001600160801b0395861617969096179290921697909717959095179590951693909317835560a085015160c08601518516909102931692909217600190910155517fabb050dfab079c06cc2fc5cc098f4765b413e1106c9bcab94647481aa65412ea90611745908a90899089908990899094855263ffffffff9390931660208501526001600160801b0391821660408501528116606084015216608082015260a00190565b60405180910390a15050505050505050565b6000806000806117678686612145565b60008881526008602090815260408083208a84528252918290208251808401909352546001600160801b03808216808552600160801b9092041691830191909152929450909250906117ba908490612fe1565b94508181602001516117cc9190612fe1565b93505050509250929050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff1660008115801561181e5750825b905060008267ffffffffffffffff16600114801561183b5750303b155b905081158015611849575080155b156118675760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561189157845460ff60401b1916600160401b1785555b6118996122a1565b6118a16122a1565b600080546001600160a01b03808b166001600160a01b0319928316178355600180548b831690841617905560028054918a16919092161790556118e4908a611da7565b506118fd60008051602061309c8339815191528a611da7565b506119287f58a091b35f80bf54631090022328af78163c65b6b8fe6a4f19b69534d179fed08a611da7565b50831561196f57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b600080546040516334dd5e1560e21b81526004810186905282916001600160a01b03169063d3757854906024016040805180830381865afa1580156119c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e79190612cc7565b915091506000826001600160801b031611611a395760405162461bcd60e51b81526020600482015260126024820152713737b716b2bc34b9ba32b73a103a37b5b2b760711b6044820152606401610685565b428163ffffffff1611611a7e5760405162461bcd60e51b815260206004820152600d60248201526c1d1bdad95b88195e1c1a5c9959609a1b6044820152606401610685565b600084815260036020908152604091829020825160e08101845281546001600160801b03808216835263ffffffff600160801b8084048216968501879052600160a01b8404821697850197909752600160c01b830481166060850152600160e01b909204909116608083015260019092015480831660a0830152939093041660c0830152611b415760405162461bcd60e51b815260206004820152601060248201526f06e6f6e2d6578697374656e74205350560841b6044820152606401610685565b42816020015163ffffffff1610611b8c5760405162461bcd60e51b815260206004820152600f60248201526e14d414081b9bdd081cdd185c9d1959608a1b6044820152606401610685565b8051611b99908490612fe1565b6001600160801b0316816080015163ffffffff161015611bf15760405162461bcd60e51b81526020600482015260136024820152726e6f7420656e6f75676820636170616369747960681b6044820152606401610685565b8281600001818151611c039190612fe1565b6001600160801b031690525060408101805190611c1f82613001565b63ffffffff90811690915260008781526003602090815260408083208651815484890151848a015160608b015160808c01518a16600160e01b026001600160e01b03918b16600160c01b0263ffffffff60c01b19938c16600160a01b029390931667ffffffffffffffff60a01b19948c16600160801b9081026001600160a01b03199097166001600160801b0398891617969096179490941693909317919091171617835560a08901805160c08b01805185168402918516919091176001909501949094558e8752600686528487208e905584518086018652905183168152925182168386019081528e8752600786528487208e8852865284872093519051831690910291161790556001600160a01b038916835260099091529020611d4992509088906120d216565b5060408051878152602081018790526001600160801b0385168183015290517fb0f7a33bc3807cbddd1c70898b8eef2430bc0600c4499ebf0cce73f5b156a0e79181900360600190a1505050505050565b611da481336122ab565b50565b60006000805160206130bc833981519152611dc28484610cfa565b611e42576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055611df83390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610628565b6000915050610628565b5092915050565b600061075c83836122e4565b60006000805160206130bc833981519152611e7a8484610cfa565b15611e42576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610628565b6000818152600183016020526040812054151561075c565b611efd838361230e565b60008381526008602090815260408083208584528252918290208251808401909352546001600160801b03808216808552600160801b909204169183019190915215611f66576001548151611f66916001600160a01b03169084906001600160801b031661241c565b60208101516001600160801b031615611f9f576002546020820151611f9f916001600160a01b03169084906001600160801b031661241c565b6040805180820182526000808252602080830182815288835260088252848320888452825291849020925191516001600160801b03908116600160801b029281169290921790925583518483015184518981529384018890526001600160a01b03871684860152908216606084015216608082015290517ff0cea7eba9827ade46cfbff8a1ccd22c5f3bc6dea4d3afd54c0aae022a2191239181900360a00190a150505050565b600061075c838361244d565b6000610628825490565b6060600080846001600160a01b0316846040516120799190613024565b600060405180830381855af49150503d80600081146120b4576040519150601f19603f3d011682016040523d82523d6000602084013e6120b9565b606091505b50915091506120c9858383612536565b95945050505050565b600061075c838361258b565b6040516001600160a01b0384811660248301528381166044830152606482018390526107349186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506125da565b600080546040516334dd5e1560e21b815260048101859052829182916001600160a01b039091169063d3757854906024016040805180830381865afa158015612192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b69190612cc7565b506000858152600360209081526040808320815160e08101835281546001600160801b03808216835263ffffffff600160801b808404821685890152600160a01b8404821685880152600160c01b840482166060860152600160e01b90930416608084015260019093015480841660a0840190815290829004841660c08401528c8752600786528487208c88528652958490208451808601909552548084168086529190049092169383019390935292519394509092909161227791612d0c565b6122819084613040565b945080602001518260c001516122979190612d0c565b6117cc9084613040565b6122a961263d565b565b6122b58282610cfa565b6113785760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610685565b60008260000182815481106122fb576122fb612f22565b9060005260206000200154905092915050565b60008061231b8484612145565b60008681526008602090815260408083208884528252918290208251808401909352546001600160801b03808216808552600160801b90920416918301919091529294509092509083908290612372908390612fe1565b6001600160801b0316905250602081018051839190612392908390612fe1565b6001600160801b0390811690915260008781526008602090815260408083208984528252808320865196830151968516600160801b9786168802179055805180820182526003835281842060010154808616825287900485168184019081529a84526007835281842099845298909152902095519651968116961690910294909417909255505050565b6040516001600160a01b038381166024830152604482018390526107ae91859182169063a9059cbb90606401612113565b60008181526001830160205260408120548015611e42576000612471600183612f0f565b855490915060009061248590600190612f0f565b90508082146124ea5760008660000182815481106124a5576124a5612f22565b90600052602060002001549050808760000184815481106124c8576124c8612f22565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806124fb576124fb613063565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610628565b60608261254b5761254682612686565b61075c565b815115801561256257506001600160a01b0384163b155b15611e4c57604051639996b31560e01b81526001600160a01b0385166004820152602401610685565b60008181526001830160205260408120546125d257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610628565b506000610628565b60006125ef6001600160a01b038416836126af565b905080516000141580156126145750808060200190518101906126129190613079565b155b156107ae57604051635274afe760e01b81526001600160a01b0384166004820152602401610685565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166122a957604051631afcd79f60e31b815260040160405180910390fd5b8051156126965780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b606061075c8383600084600080856001600160a01b031684866040516126d59190613024565b60006040518083038185875af1925050503d8060008114612712576040519150601f19603f3d011682016040523d82523d6000602084013e612717565b606091505b5091509150612727868383612536565b9695505050505050565b60006020828403121561274357600080fd5b81356001600160e01b03198116811461075c57600080fd5b60006020828403121561276d57600080fd5b5035919050565b6001600160a01b0381168114611da457600080fd5b6000806000806000608086880312156127a157600080fd5b85356127ac81612774565b945060208601356127bc81612774565b935060408601359250606086013567ffffffffffffffff808211156127e057600080fd5b818801915088601f8301126127f457600080fd5b81358181111561280357600080fd5b89602082850101111561281557600080fd5b9699959850939650602001949392505050565b6000806040838503121561283b57600080fd5b82359150602083013561284d81612774565b809150509250929050565b6000806040838503121561286b57600080fd5b823561287681612774565b946020939093013593505050565b6000806040838503121561289757600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156128d7576128d76128a6565b604051601f8501601f19908116603f011681019082821181831017156128ff576128ff6128a6565b8160405280935085815286868601111561291857600080fd5b858560208301376000602087830101525050509392505050565b60008060006060848603121561294757600080fd5b83359250602084013561295981612774565b9150604084013567ffffffffffffffff81111561297557600080fd5b8401601f8101861361298657600080fd5b612995868235602084016128bc565b9150509250925092565b6000602082840312156129b157600080fd5b813561075c81612774565b600082601f8301126129cd57600080fd5b61075c838335602085016128bc565b600080604083850312156129ef57600080fd5b82359150602083013567ffffffffffffffff811115612a0d57600080fd5b612a19858286016129bc565b9150509250929050565b63ffffffff81168114611da457600080fd5b60008060008060808587031215612a4b57600080fd5b843593506020850135612a5d81612a23565b92506040850135612a6d81612a23565b9150606085013567ffffffffffffffff811115612a8957600080fd5b612a95878288016129bc565b91505092959194509250565b60008060208385031215612ab457600080fd5b823567ffffffffffffffff80821115612acc57600080fd5b818501915085601f830112612ae057600080fd5b813581811115612aef57600080fd5b8660208260051b8501011115612b0457600080fd5b60209290920196919550909350505050565b60005b83811015612b31578181015183820152602001612b19565b50506000910152565b60008151808452612b52816020860160208601612b16565b601f01601f19169290920160200192915050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015612bbd57603f19888603018452612bab858351612b3a565b94509285019290850190600101612b8f565b5092979650505050505050565b60208152600061075c6020830184612b3a565b6001600160801b0381168114611da457600080fd5b60008060008060008060c08789031215612c0b57600080fd5b863595506020870135612c1d81612a23565b94506040870135612c2d81612a23565b93506060870135612c3d81612bdd565b92506080870135612c4d81612bdd565b915060a0870135612c5d81612bdd565b809150509295509295509295565b60008060008060808587031215612c8157600080fd5b8435612c8c81612774565b93506020850135612c9c81612774565b92506040850135612cac81612774565b91506060850135612cbc81612774565b939692955090935050565b60008060408385031215612cda57600080fd5b8251612ce581612bdd565b602084015190925061284d81612a23565b634e487b7160e01b600052601160045260246000fd5b6001600160801b03828116828216039080821115611e4c57611e4c612cf6565b600063ffffffff821680612d4257612d42612cf6565b6000190192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061272790830184612b3a565b600181811c90821680612d9357607f821691505b602082108103612db357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156107ae576000816000526020600020601f850160051c81016020861015612de25750805b601f850160051c820191505b81811015612e0157828155600101612dee565b505050505050565b815167ffffffffffffffff811115612e2357612e236128a6565b612e3781612e318454612d7f565b84612db9565b602080601f831160018114612e6c5760008415612e545750858301515b600019600386901b1c1916600185901b178555612e01565b600085815260208120601f198616915b82811015612e9b57888601518255948401946001909101908401612e7c565b5085821015612eb95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b828152604060208201526000612ee26040830184612b3a565b949350505050565b83815263ffffffff831660208201526060604082015260006120c96060830184612b3a565b8181038181111561062857610628612cf6565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112612f4f57600080fd5b83018035915067ffffffffffffffff821115612f6a57600080fd5b602001915036819003821315612f7f57600080fd5b9250929050565b828482376000838201600081528351612fa3818360208801612b16565b0195945050505050565b60006001600160801b0380841680612fd557634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b6001600160801b03818116838216019080821115611e4c57611e4c612cf6565b600063ffffffff80831681810361301a5761301a612cf6565b6001019392505050565b60008251613036818460208701612b16565b9190910192915050565b6001600160801b0381811683821602808216919082811461110357611103612cf6565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561308b57600080fd5b8151801515811461075c57600080fdfeb0c331f811f0a143bc7db7ce1e54ade59db9a37bbc06b4b393bab580f7a3c73c02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800a26469706673582212202243c87c863bde890fad4ce4c0ff60348a6344b3b5ee9c25019e737d8c1396f564736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c8063a278d5261161010f578063d6842339116100a2578063f2f8511a11610071578063f2f8511a146104f5578063f3ff9bb314610508578063f8c8765e146105bd578063fcd222a3146105d057600080fd5b8063d68423391461047d578063e221505314610490578063e3043ee8146104a3578063f0ac97a5146104b657600080fd5b8063ad6706bb116100de578063ad6706bb14610424578063ba76775414610437578063bd3507da14610457578063d547741f1461046a57600080fd5b8063a278d526146103c9578063a925a09a146103dc578063abfade85146103f1578063ac9650d81461040457600080fd5b80633c423f0b116101875780638928e74d116101565780638928e74d1461033c57806391d148541461034f5780639bde779514610362578063a217fddf146103c157600080fd5b80633c423f0b146102d85780633de71ff0146102eb57806347ccca02146102fe57806370a082311461032957600080fd5b80632f2ff15d116101c35780632f2ff15d1461028a5780632f745c591461029f5780633512ad3e146102b257806336568abe146102c557600080fd5b806301ffc9a7146101f55780630ae7b9911461021d578063150b7a021461024b578063248a9ca314610277575b600080fd5b610208610203366004612731565b6105f7565b60405190151581526020015b60405180910390f35b61023d61022b36600461275b565b60066020526000908152604090205481565b604051908152602001610214565b61025e610259366004612789565b61062e565b6040516001600160e01b03199091168152602001610214565b61023d61028536600461275b565b6106f6565b61029d610298366004612828565b610718565b005b61023d6102ad366004612858565b61073a565b61023d6102c0366004612884565b610763565b61029d6102d3366004612828565b61077b565b61029d6102e6366004612932565b6107b3565b61023d6102f936600461275b565b610ba6565b600054610311906001600160a01b031681565b6040516001600160a01b039091168152602001610214565b61023d61033736600461299f565b610bbd565b61029d61034a366004612884565b610bde565b61020861035d366004612828565b610cfa565b6103a1610370366004612884565b60076020908152600092835260408084209091529082529020546001600160801b0380821691600160801b90041682565b604080516001600160801b03938416815292909116602083015201610214565b61023d600081565b61029d6103d73660046129dc565b610d32565b61023d60008051602061309c83398151915281565b61029d6103ff366004612a35565b610d94565b610417610412366004612aa1565b611023565b6040516102149190612b66565b61029d610432366004612884565b61110b565b61044a61044536600461275b565b611266565b6040516102149190612bca565b61029d61046536600461275b565b611300565b61029d610478366004612828565b61137c565b600254610311906001600160a01b031681565b61029d61049e366004612bf2565b611398565b6103a16104b1366004612884565b611757565b6103a16104c4366004612884565b60086020908152600092835260408084209091529082529020546001600160801b0380821691600160801b90041682565b600154610311906001600160a01b031681565b61057261051636600461275b565b600360205260009081526040902080546001909101546001600160801b038083169263ffffffff600160801b808304821694600160a01b8404831694600160c01b8504841694600160e01b900490931692818116929091041687565b604080516001600160801b03988916815263ffffffff97881660208201529587169086015292851660608501529316608083015291831660a0820152911660c082015260e001610214565b61029d6105cb366004612c6b565b6117d8565b61023d7f58a091b35f80bf54631090022328af78163c65b6b8fe6a4f19b69534d179fed081565b60006001600160e01b03198216637965db0b60e01b148061062857506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080546001600160a01b0316331461068e5760405162461bcd60e51b815260206004820152601c60248201527f6e6f742061206370696e207669727475616c2070616e656c206e66740000000060448201526064015b60405180910390fd5b816106ce5760405162461bcd60e51b815260206004820152601060248201526f1b9bc819185d18481c1c9bdd9a59195960821b6044820152606401610685565b6106e4846106de8486018661275b565b8761197a565b50630a85bd0160e11b95945050505050565b60009081526000805160206130bc833981519152602052604090206001015490565b610721826106f6565b61072a81611d9a565b6107348383611da7565b50505050565b6001600160a01b038216600090815260096020526040812061075c9083611e53565b9392505050565b600082815260056020526040812061075c9083611e53565b6001600160a01b03811633146107a45760405163334bd91960e11b815260040160405180910390fd5b6107ae8282611e5f565b505050565b600080546040516334dd5e1560e21b81526004810186905282916001600160a01b03169063d3757854906024016040805180830381865afa1580156107fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108209190612cc7565b915091506000826001600160801b0316116108725760405162461bcd60e51b81526020600482015260126024820152713737b716b2bc34b9ba32b73a103a37b5b2b760711b6044820152606401610685565b6001600160a01b03841660009081526009602052604090206108949086611edb565b6108d05760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b21037bbb732b960991b6044820152606401610685565b428163ffffffff16111561092f576001600160a01b038416331461092f5760405162461bcd60e51b81526020600482015260166024820152751bdb9b1e481bdddb995c8818d85b8818dbdb1b1958dd60521b6044820152606401610685565b600085815260066020526040902054610949868287611ef3565b600081815260036020908152604091829020825160e08101845281546001600160801b0380821680845263ffffffff600160801b808504821697860197909752600160a01b8404811697850197909752600160c01b830487166060850152600160e01b909204909516608083015260019092015480851660a08301529290920490921660c082015290849082906109e1908390612d0c565b6001600160801b0316905250604081018051906109fd82612d2c565b63ffffffff90811690915260008481526003602090815260408083208651815484890151848a015160608b015160808c01518a16600160e01b026001600160e01b03918b16600160c01b0263ffffffff60c01b19938c16600160a01b029390931667ffffffffffffffff60a01b19948c16600160801b9081026001600160a01b03199097166001600160801b0398891617969096179490941693909317919091171617835560a089015160c08a015183169091029116176001909101556001600160a01b038b16835260099091529020610adb925090899061204616565b5060008781526006602052604080822082905590549051635c46a7ef60e11b81526001600160a01b039091169063b88d4fde90610b229030908a908c908b90600401612d4c565b600060405180830381600087803b158015610b3c57600080fd5b505af1158015610b50573d6000803e3d6000fd5b5050604080518a8152602081018690526001600160801b0388168183015290517fc0f5cea5f46ac30c06facea0350694cb514a93ee92a2da625b2a696fe1624faa9350908190036060019150a150505050505050565b600081815260056020526040812061062890612052565b6001600160a01b038116600090815260096020526040812061062890612052565b60008051602061309c833981519152610bf681611d9a565b600083815260036020526040902054600160801b900463ffffffff16610c4e5760405162461bcd60e51b815260206004820152600d60248201526c14d414081b9bdd08199bdd5b99609a1b6044820152606401610685565b6000838152600560205260409020610c669083611edb565b610ca25760405162461bcd60e51b815260206004820152600d60248201526c191a59081b9bdd08199bdd5b99609a1b6044820152606401610685565b6000838152600560205260409020610cba9083612046565b5060408051848152602081018490527fae7443998f1af030e485fe6fc051f45e94f9f1e5640193cdd3eeaec9336bf7aa91015b60405180910390a1505050565b60009182526000805160206130bc833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60008051602061309c833981519152610d4a81611d9a565b6000838152600460205260409020610d628382612e09565b507fedb141dfbe8eea85d498187fc869ad6b9dae6d7dce98472834d6a054518f54068383604051610ced929190612ec9565b60008051602061309c833981519152610dac81611d9a565b60008511610df25760405162461bcd60e51b81526020600482015260136024820152726964206d75737420626520706f73697469766560681b6044820152606401610685565b600085815260036020526040902054600160801b900463ffffffff1615610e505760405162461bcd60e51b815260206004820152601260248201527153505020616c72656164792065786973747360701b6044820152606401610685565b8363ffffffff16421115610ea65760405162461bcd60e51b815260206004820152601b60248201527f737461727454696d65206d757374206265206166746572206e6f7700000000006044820152606401610685565b6000825111610ee85760405162461bcd60e51b815260206004820152600e60248201526d195b5c1d1e481a5c199cc818da5960921b6044820152606401610685565b6040805160e081018252600080825263ffffffff8088166020808501828152858701858152606087019384528a85166080880190815260a0880187815260c089018881528f8952600386528a892099518a5495519451975193518916600160e01b026001600160e01b03948a16600160c01b0263ffffffff60c01b19998b16600160a01b029990991667ffffffffffffffff60a01b1996909a16600160801b9081026001600160a01b03199098166001600160801b039384161797909717959095169890981796909617919091169190911787555192518416029190921617600190930192909255600490915220610fe08382612e09565b507f2901445817bb97938d949a68bd568f023e61da08d1a669c9c042a8a96cb825b585858460405161101493929190612eea565b60405180910390a15050505050565b6040805160008152602081019091526060908267ffffffffffffffff81111561104e5761104e6128a6565b60405190808252806020026020018201604052801561108157816020015b606081526020019060019003908161106c5790505b50915060005b83811015611103576110de308686848181106110a5576110a5612f22565b90506020028101906110b79190612f38565b856040516020016110ca93929190612f86565b60405160208183030381529060405261205c565b8382815181106110f0576110f0612f22565b6020908102919091010152600101611087565b505092915050565b60008051602061309c83398151915261112381611d9a565b600083815260036020526040902054600160801b900463ffffffff1661117b5760405162461bcd60e51b815260206004820152600d60248201526c14d414081b9bdd08199bdd5b99609a1b6044820152606401610685565b816000036111bd5760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b6044820152606401610685565b60008381526005602052604090206111d59083611edb565b156112175760405162461bcd60e51b8152602060048201526012602482015271185b1c9958591e481c9959da5cdd195c995960721b6044820152606401610685565b600083815260056020526040902061122f90836120d2565b5060408051848152602081018490527fae5ecbf0c241d947ba95d558775f54835565b930391185474a2bd3a5debcae6e9101610ced565b6004602052600090815260409020805461127f90612d7f565b80601f01602080910402602001604051908101604052809291908181526020018280546112ab90612d7f565b80156112f85780601f106112cd576101008083540402835291602001916112f8565b820191906000526020600020905b8154815290600101906020018083116112db57829003601f168201915b505050505081565b3360009081526009602052604090206113199082611edb565b61135e5760405162461bcd60e51b81526020600482015260166024820152751bdb9b1e481bdddb995c8818d85b8818dbdb1b1958dd60521b6044820152606401610685565b600081815260066020526040902054611378828233611ef3565b5050565b611385826106f6565b61138e81611d9a565b6107348383611e5f565b7f58a091b35f80bf54631090022328af78163c65b6b8fe6a4f19b69534d179fed06113c281611d9a565b428563ffffffff16106114175760405162461bcd60e51b815260206004820152601760248201527f74696d65206d757374206265206265666f7265206e6f770000000000000000006044820152606401610685565b600087815260036020908152604091829020825160e08101845281546001600160801b03808216835263ffffffff600160801b8084048216968501879052600160a01b8404821697850197909752600160c01b830481166060850152600160e01b909204909116608083015260019092015480831660a0830152939093041660c08301526114da5760405162461bcd60e51b815260206004820152601060248201526f06e6f6e2d6578697374656e74205350560841b6044820152606401610685565b8663ffffffff16816060015163ffffffff16146115395760405162461bcd60e51b815260206004820152601a60248201527f696e76616c69642070726576696f757355706461746554696d650000000000006044820152606401610685565b6000846001600160801b031611801561155b575080516001600160801b031615155b156115a857805161156c9085612fad565b8160a00181815161157d9190612fe1565b6001600160801b039081169091526001546115a892506001600160a01b0316903390309088166120de565b6000836001600160801b03161180156115ca575080516001600160801b031615155b156116175780516115db9084612fad565b8160c0018181516115ec9190612fe1565b6001600160801b0390811690915260025461161792506001600160a01b0316903390309087166120de565b63ffffffff8087166060830190815260008a815260036020908152604091829020855181549287015184880151955160808901518816600160e01b026001600160e01b03918916600160c01b0263ffffffff60c01b19988a16600160a01b029890981667ffffffffffffffff60a01b1993909916600160801b9081026001600160a01b03199097166001600160801b0395861617969096179290921697909717959095179590951693909317835560a085015160c08601518516909102931692909217600190910155517fabb050dfab079c06cc2fc5cc098f4765b413e1106c9bcab94647481aa65412ea90611745908a90899089908990899094855263ffffffff9390931660208501526001600160801b0391821660408501528116606084015216608082015260a00190565b60405180910390a15050505050505050565b6000806000806117678686612145565b60008881526008602090815260408083208a84528252918290208251808401909352546001600160801b03808216808552600160801b9092041691830191909152929450909250906117ba908490612fe1565b94508181602001516117cc9190612fe1565b93505050509250929050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff1660008115801561181e5750825b905060008267ffffffffffffffff16600114801561183b5750303b155b905081158015611849575080155b156118675760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561189157845460ff60401b1916600160401b1785555b6118996122a1565b6118a16122a1565b600080546001600160a01b03808b166001600160a01b0319928316178355600180548b831690841617905560028054918a16919092161790556118e4908a611da7565b506118fd60008051602061309c8339815191528a611da7565b506119287f58a091b35f80bf54631090022328af78163c65b6b8fe6a4f19b69534d179fed08a611da7565b50831561196f57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b600080546040516334dd5e1560e21b81526004810186905282916001600160a01b03169063d3757854906024016040805180830381865afa1580156119c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e79190612cc7565b915091506000826001600160801b031611611a395760405162461bcd60e51b81526020600482015260126024820152713737b716b2bc34b9ba32b73a103a37b5b2b760711b6044820152606401610685565b428163ffffffff1611611a7e5760405162461bcd60e51b815260206004820152600d60248201526c1d1bdad95b88195e1c1a5c9959609a1b6044820152606401610685565b600084815260036020908152604091829020825160e08101845281546001600160801b03808216835263ffffffff600160801b8084048216968501879052600160a01b8404821697850197909752600160c01b830481166060850152600160e01b909204909116608083015260019092015480831660a0830152939093041660c0830152611b415760405162461bcd60e51b815260206004820152601060248201526f06e6f6e2d6578697374656e74205350560841b6044820152606401610685565b42816020015163ffffffff1610611b8c5760405162461bcd60e51b815260206004820152600f60248201526e14d414081b9bdd081cdd185c9d1959608a1b6044820152606401610685565b8051611b99908490612fe1565b6001600160801b0316816080015163ffffffff161015611bf15760405162461bcd60e51b81526020600482015260136024820152726e6f7420656e6f75676820636170616369747960681b6044820152606401610685565b8281600001818151611c039190612fe1565b6001600160801b031690525060408101805190611c1f82613001565b63ffffffff90811690915260008781526003602090815260408083208651815484890151848a015160608b015160808c01518a16600160e01b026001600160e01b03918b16600160c01b0263ffffffff60c01b19938c16600160a01b029390931667ffffffffffffffff60a01b19948c16600160801b9081026001600160a01b03199097166001600160801b0398891617969096179490941693909317919091171617835560a08901805160c08b01805185168402918516919091176001909501949094558e8752600686528487208e905584518086018652905183168152925182168386019081528e8752600786528487208e8852865284872093519051831690910291161790556001600160a01b038916835260099091529020611d4992509088906120d216565b5060408051878152602081018790526001600160801b0385168183015290517fb0f7a33bc3807cbddd1c70898b8eef2430bc0600c4499ebf0cce73f5b156a0e79181900360600190a1505050505050565b611da481336122ab565b50565b60006000805160206130bc833981519152611dc28484610cfa565b611e42576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055611df83390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610628565b6000915050610628565b5092915050565b600061075c83836122e4565b60006000805160206130bc833981519152611e7a8484610cfa565b15611e42576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610628565b6000818152600183016020526040812054151561075c565b611efd838361230e565b60008381526008602090815260408083208584528252918290208251808401909352546001600160801b03808216808552600160801b909204169183019190915215611f66576001548151611f66916001600160a01b03169084906001600160801b031661241c565b60208101516001600160801b031615611f9f576002546020820151611f9f916001600160a01b03169084906001600160801b031661241c565b6040805180820182526000808252602080830182815288835260088252848320888452825291849020925191516001600160801b03908116600160801b029281169290921790925583518483015184518981529384018890526001600160a01b03871684860152908216606084015216608082015290517ff0cea7eba9827ade46cfbff8a1ccd22c5f3bc6dea4d3afd54c0aae022a2191239181900360a00190a150505050565b600061075c838361244d565b6000610628825490565b6060600080846001600160a01b0316846040516120799190613024565b600060405180830381855af49150503d80600081146120b4576040519150601f19603f3d011682016040523d82523d6000602084013e6120b9565b606091505b50915091506120c9858383612536565b95945050505050565b600061075c838361258b565b6040516001600160a01b0384811660248301528381166044830152606482018390526107349186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506125da565b600080546040516334dd5e1560e21b815260048101859052829182916001600160a01b039091169063d3757854906024016040805180830381865afa158015612192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b69190612cc7565b506000858152600360209081526040808320815160e08101835281546001600160801b03808216835263ffffffff600160801b808404821685890152600160a01b8404821685880152600160c01b840482166060860152600160e01b90930416608084015260019093015480841660a0840190815290829004841660c08401528c8752600786528487208c88528652958490208451808601909552548084168086529190049092169383019390935292519394509092909161227791612d0c565b6122819084613040565b945080602001518260c001516122979190612d0c565b6117cc9084613040565b6122a961263d565b565b6122b58282610cfa565b6113785760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610685565b60008260000182815481106122fb576122fb612f22565b9060005260206000200154905092915050565b60008061231b8484612145565b60008681526008602090815260408083208884528252918290208251808401909352546001600160801b03808216808552600160801b90920416918301919091529294509092509083908290612372908390612fe1565b6001600160801b0316905250602081018051839190612392908390612fe1565b6001600160801b0390811690915260008781526008602090815260408083208984528252808320865196830151968516600160801b9786168802179055805180820182526003835281842060010154808616825287900485168184019081529a84526007835281842099845298909152902095519651968116961690910294909417909255505050565b6040516001600160a01b038381166024830152604482018390526107ae91859182169063a9059cbb90606401612113565b60008181526001830160205260408120548015611e42576000612471600183612f0f565b855490915060009061248590600190612f0f565b90508082146124ea5760008660000182815481106124a5576124a5612f22565b90600052602060002001549050808760000184815481106124c8576124c8612f22565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806124fb576124fb613063565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610628565b60608261254b5761254682612686565b61075c565b815115801561256257506001600160a01b0384163b155b15611e4c57604051639996b31560e01b81526001600160a01b0385166004820152602401610685565b60008181526001830160205260408120546125d257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610628565b506000610628565b60006125ef6001600160a01b038416836126af565b905080516000141580156126145750808060200190518101906126129190613079565b155b156107ae57604051635274afe760e01b81526001600160a01b0384166004820152602401610685565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166122a957604051631afcd79f60e31b815260040160405180910390fd5b8051156126965780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b606061075c8383600084600080856001600160a01b031684866040516126d59190613024565b60006040518083038185875af1925050503d8060008114612712576040519150601f19603f3d011682016040523d82523d6000602084013e612717565b606091505b5091509150612727868383612536565b9695505050505050565b60006020828403121561274357600080fd5b81356001600160e01b03198116811461075c57600080fd5b60006020828403121561276d57600080fd5b5035919050565b6001600160a01b0381168114611da457600080fd5b6000806000806000608086880312156127a157600080fd5b85356127ac81612774565b945060208601356127bc81612774565b935060408601359250606086013567ffffffffffffffff808211156127e057600080fd5b818801915088601f8301126127f457600080fd5b81358181111561280357600080fd5b89602082850101111561281557600080fd5b9699959850939650602001949392505050565b6000806040838503121561283b57600080fd5b82359150602083013561284d81612774565b809150509250929050565b6000806040838503121561286b57600080fd5b823561287681612774565b946020939093013593505050565b6000806040838503121561289757600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156128d7576128d76128a6565b604051601f8501601f19908116603f011681019082821181831017156128ff576128ff6128a6565b8160405280935085815286868601111561291857600080fd5b858560208301376000602087830101525050509392505050565b60008060006060848603121561294757600080fd5b83359250602084013561295981612774565b9150604084013567ffffffffffffffff81111561297557600080fd5b8401601f8101861361298657600080fd5b612995868235602084016128bc565b9150509250925092565b6000602082840312156129b157600080fd5b813561075c81612774565b600082601f8301126129cd57600080fd5b61075c838335602085016128bc565b600080604083850312156129ef57600080fd5b82359150602083013567ffffffffffffffff811115612a0d57600080fd5b612a19858286016129bc565b9150509250929050565b63ffffffff81168114611da457600080fd5b60008060008060808587031215612a4b57600080fd5b843593506020850135612a5d81612a23565b92506040850135612a6d81612a23565b9150606085013567ffffffffffffffff811115612a8957600080fd5b612a95878288016129bc565b91505092959194509250565b60008060208385031215612ab457600080fd5b823567ffffffffffffffff80821115612acc57600080fd5b818501915085601f830112612ae057600080fd5b813581811115612aef57600080fd5b8660208260051b8501011115612b0457600080fd5b60209290920196919550909350505050565b60005b83811015612b31578181015183820152602001612b19565b50506000910152565b60008151808452612b52816020860160208601612b16565b601f01601f19169290920160200192915050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015612bbd57603f19888603018452612bab858351612b3a565b94509285019290850190600101612b8f565b5092979650505050505050565b60208152600061075c6020830184612b3a565b6001600160801b0381168114611da457600080fd5b60008060008060008060c08789031215612c0b57600080fd5b863595506020870135612c1d81612a23565b94506040870135612c2d81612a23565b93506060870135612c3d81612bdd565b92506080870135612c4d81612bdd565b915060a0870135612c5d81612bdd565b809150509295509295509295565b60008060008060808587031215612c8157600080fd5b8435612c8c81612774565b93506020850135612c9c81612774565b92506040850135612cac81612774565b91506060850135612cbc81612774565b939692955090935050565b60008060408385031215612cda57600080fd5b8251612ce581612bdd565b602084015190925061284d81612a23565b634e487b7160e01b600052601160045260246000fd5b6001600160801b03828116828216039080821115611e4c57611e4c612cf6565b600063ffffffff821680612d4257612d42612cf6565b6000190192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061272790830184612b3a565b600181811c90821680612d9357607f821691505b602082108103612db357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156107ae576000816000526020600020601f850160051c81016020861015612de25750805b601f850160051c820191505b81811015612e0157828155600101612dee565b505050505050565b815167ffffffffffffffff811115612e2357612e236128a6565b612e3781612e318454612d7f565b84612db9565b602080601f831160018114612e6c5760008415612e545750858301515b600019600386901b1c1916600185901b178555612e01565b600085815260208120601f198616915b82811015612e9b57888601518255948401946001909101908401612e7c565b5085821015612eb95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b828152604060208201526000612ee26040830184612b3a565b949350505050565b83815263ffffffff831660208201526060604082015260006120c96060830184612b3a565b8181038181111561062857610628612cf6565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112612f4f57600080fd5b83018035915067ffffffffffffffff821115612f6a57600080fd5b602001915036819003821315612f7f57600080fd5b9250929050565b828482376000838201600081528351612fa3818360208801612b16565b0195945050505050565b60006001600160801b0380841680612fd557634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b6001600160801b03818116838216019080821115611e4c57611e4c612cf6565b600063ffffffff80831681810361301a5761301a612cf6565b6001019392505050565b60008251613036818460208701612b16565b9190910192915050565b6001600160801b0381811683821602808216919082811461110357611103612cf6565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561308b57600080fd5b8151801515811461075c57600080fdfeb0c331f811f0a143bc7db7ce1e54ade59db9a37bbc06b4b393bab580f7a3c73c02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800a26469706673582212202243c87c863bde890fad4ce4c0ff60348a6344b3b5ee9c25019e737d8c1396f564736f6c63430008170033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "multicall(bytes[])": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "stateVariables": {
      "sppDatas": {
        "details": "sppId => SppData"
      },
      "sppDids": {
        "details": "sppId => peaq did set"
      },
      "sppIpfsCids": {
        "details": "sppId => ipfs cid"
      },
      "tokenEarnedValues": {
        "details": "tokenId => sppId => TokenEarnedValues"
      },
      "tokenIdToSppId": {
        "details": "tokenId => sppId"
      },
      "tokenRewardIndexes": {
        "details": "tokenId => sppId => RewardIndexes"
      },
      "userStakedTokens": {
        "details": "account => staked tokens set"
      }
    },
    "title": "Stake Cpin Virtual Panels to SPP's and get CDATA and CWATT tokens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10273,
        "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
        "label": "nft",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ICpinVirtualPanel)11676"
      },
      {
        "astId": 10277,
        "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
        "label": "CDATAToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)2299"
      },
      {
        "astId": 10281,
        "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
        "label": "CWATTToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)2299"
      },
      {
        "astId": 10288,
        "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
        "label": "sppDatas",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(SppData)10264_storage)"
      },
      {
        "astId": 10294,
        "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
        "label": "sppIpfsCids",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 10300,
        "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
        "label": "sppDids",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(UintSet)9713_storage)"
      },
      {
        "astId": 10306,
        "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
        "label": "tokenIdToSppId",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10315,
        "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
        "label": "tokenRewardIndexes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TokenRewardInfo)10269_storage))"
      },
      {
        "astId": 10324,
        "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
        "label": "tokenEarnedValues",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TokenRewardInfo)10269_storage))"
      },
      {
        "astId": 10330,
        "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
        "label": "userStakedTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(UintSet)9713_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICpinVirtualPanel)11676": {
        "encoding": "inplace",
        "label": "contract ICpinVirtualPanel",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2299": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UintSet)9713_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)9713_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TokenRewardInfo)10269_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct CpinSppStaking.TokenRewardInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(TokenRewardInfo)10269_storage)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(SppData)10264_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CpinSppStaking.SppData)",
        "numberOfBytes": "32",
        "value": "t_struct(SppData)10264_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenRewardInfo)10269_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CpinSppStaking.TokenRewardInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenRewardInfo)10269_storage"
      },
      "t_mapping(t_uint256,t_struct(UintSet)9713_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)9713_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Set)9241_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 9236,
            "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9240,
            "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SppData)10264_storage": {
        "encoding": "inplace",
        "label": "struct CpinSppStaking.SppData",
        "members": [
          {
            "astId": 10251,
            "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
            "label": "totalStakedCapacity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 10253,
            "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
            "label": "startTime",
            "offset": 16,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 10255,
            "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
            "label": "numberOfStakes",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 10257,
            "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
            "label": "lastUpdateTime",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 10259,
            "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
            "label": "maxCapacity",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 10261,
            "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
            "label": "rewardIndexCDATA",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 10263,
            "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
            "label": "rewardIndexCWATT",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenRewardInfo)10269_storage": {
        "encoding": "inplace",
        "label": "struct CpinSppStaking.TokenRewardInfo",
        "members": [
          {
            "astId": 10266,
            "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
            "label": "valueCDATA",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 10268,
            "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
            "label": "valueCWATT",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UintSet)9713_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 9712,
            "contract": "contracts/CpinSppStaking.sol:CpinSppStaking",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)9241_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}